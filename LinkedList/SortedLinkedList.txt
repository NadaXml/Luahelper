---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by luxuming.
--- DateTime: 2023/8/9 10:30
---

--- TODO 不查重

--- @class SortedLinkedListElement
--- @field next SortedLinkedListElement
--- @field prev SortedLinkedListElement
--- @field bindData table

--- @alias SortedLinkedListElementCompare fun(a:SortedLinkedListElement, b:SortedLinkedListElement):number

--- @alias SortedLinkedListIteFun fun(element:SortedLinkedListElement):SortedLinkedListElement


local MaxLoopIteCount = 100

--- 双向链表
--- @class SortedLinkedList
--- @field rootElement SortedLinkedListElement
--- @field tailElement SortedLinkedListElement
local SortedLinkedList = Class()

function SortedLinkedList:ctor()
    self.rootElement = nil
    self.tailElement = nil
end

--- 创建一个链表
--- @public
--- @return SortedLinkedListElement
--- @param bindData table
function SortedLinkedList:createElement(bindData)
    return {
        next = nil,
        prev = nil,
        bindData = bindData
    }
end

--- 升序插入
--- @public
--- @param compare SortedLinkedListElementCompare
--- @param element SortedLinkedListElement
function SortedLinkedList:insertElementASC(element, compare)
    if self.rootElement == nil then
        self.rootElement = element
        self.tailElement = element
        return
    end
    local ite = self.rootElement
    local prevIte = nil
    local insertIte
    while ite ~= nil do
        if compare(element, ite) == -1 then
            insertIte = ite
            break
        end
        prevIte = ite
        ite = ite.next
    end
    if insertIte == nil then
        self:insertElementTail(element)
    else
        self:insertElementFront(insertIte, element)
    end
end

--- 降序插入
--- @public
--- @param compare SortedLinkedListElementCompare
--- @param element SortedLinkedListElement
function SortedLinkedList:insertElementDESC(element, compare)
    if self.rootElement == nil then
        self.rootElement = element
        self.tailElement = element
        return
    end
    local ite = self.rootElement
    local insertIte
    while ite ~= nil do
        if compare(element, ite) == 1 then
            insertIte = ite
            break
        end
        ite = ite.next
    end

    if insertIte == nil then
        self:insertElementTail(element)
    else
        self:insertElementFront(insertIte, element)

    end
end

--- 调用过这个方法，链表就不是有序的了
--- @public
--- @param element SortedLinkedListElement
function SortedLinkedList:insertElementHead(element)
    if self.rootElement == nil then
        self.rootElement = element
        self.tailElement = element
        return
    end
    self:insertElementFront(self.rootElement, element)
end

--- 在链表尾部插入
--- @private
--- @param element SortedLinkedListElement
function SortedLinkedList:insertElementTail(element)
    if self.rootElement == nil then
        self.rootElement = element
        self.tailElement = element
        return
    end
    self.tailElement.next = element
    element.prev = self.tailElement
    self.tailElement = element
end

--- 元素插入,再listElement位置插入，listElement往后移
--- @private
--- @param listElement SortedLinkedListElement
--- @param targetElement SortedLinkedListElement
function SortedLinkedList:insertElementFront(listElement, targetElement)
    if listElement.prev == nil then
        self.rootElement = targetElement
    else
        listElement.prev.next = targetElement
    end

    targetElement.prev = listElement.prev
    listElement.prev = targetElement
    targetElement.next = listElement
end

--- 删除元素
--- 用于前向遍历删除
--- @public
--- @param element SortedLinkedListElement
--- @return SortedLinkedListElement 元素删除后，删除位置的元素，如果链表删除后为空，返回nil
function SortedLinkedList:removeElement(element)
    local ret
    if element.prev == nil then
        self.rootElement = element.next
        self.tailElement = element.next
        ret = self.rootElement
        if ret ~= nil then
            ret.prev = nil
        end
    else
        ret = element.next
        element.prev.next = ret
        if ret ~= nil then
            ret.prev = element.prev
        end
    end
    element.prev = nil
    element.next = nil
    return ret
end

--- 遍历元素,前向遍历
--- 如果遍历的过程中发生了删除操作，就需要返回合理的下一个遍历的元素
--- @public
--- @param fun SortedLinkedListIteFun 返回值:下一个遍历的元素，返回nil则终止遍历
function SortedLinkedList:forEach(fun)
    local count = 1
    local ite = self.rootElement
    while ite ~= nil do
        local retIte = fun(ite)
        if retIte ~= nil then
            ite = retIte
        else
            ite = ite.next
        end
        count = count + 1
        if count > MaxLoopIteCount then
            break
        end
    end
end

--- 遍历元素,由前向后遍历
--- 如果遍历的过程中发生了删除操作，就需要返回合理的下一个遍历的元素
--- 如果return false停止遍历, return nil继续遍历 返回数据元素，则从该元素继续向后遍历
--- @public
--- @param fun SortedLinkedListIteFun 返回值:下一个遍历的元素，返回nil则终止遍历
function SortedLinkedList:every(fun)
    local count = 1
    local ite = self.rootElement
    while ite ~= nil do
        local retIte = fun(ite)
        if retIte == false then
            break
        elseif retIte ~= nil then
            ite = retIte
        else
            ite = ite.next
        end
        count = count + 1
        if count > MaxLoopIteCount then
            break
        end
    end
end

-- test

local testCompareHandle = function(a, b)
    if a.bindData.priority == b.bindData.priority then
        return 0
    elseif a.bindData.priority > b.bindData.priority then
        return 1
    else
        return -1
    end
end

function SortedLinkedList:assetInsert(linkedList, isUp)
    local last = nil
    linkedList:every(function(element)
        print(" element ", element.bindData.priority)
        if isUp then
            if last ~= nil then
                assert(element.bindData.priority >= last)
            end
        else
            if last ~= nil then
                assert(element.bindData.priority <= last)
            end
        end
        last = element.bindData.priority
    end)
end

-- asec
function SortedLinkedList:doTest1()
    local linkedList = SortedLinkedList.new()
    local e
    e = self:createElement({
        priority = 1,
    })
    linkedList:insertElementASC(e, testCompareHandle)
    e = self:createElement({
        priority = 2,
    })
    linkedList:insertElementASC(e, testCompareHandle)
    e = self:createElement({
        priority = 3,
    })
    linkedList:insertElementASC(e, testCompareHandle)

    e = self:createElement({
        priority = 4,
    })
    linkedList:insertElementASC(e, testCompareHandle)

    e = self:createElement({
        priority = 5,
    })
    linkedList:insertElementASC(e, testCompareHandle)

    self:assetInsert(linkedList, true)

    return linkedList
end

function SortedLinkedList:doTest2()
    local linkedList = SortedLinkedList.new()
    local e
    e = self:createElement({
        priority = 5,
    })
    linkedList:insertElementASC(e, testCompareHandle)
    e = self:createElement({
        priority = 4,
    })
    linkedList:insertElementASC(e, testCompareHandle)
    e = self:createElement({
        priority = 3,
    })
    linkedList:insertElementASC(e, testCompareHandle)

    e = self:createElement({
        priority = 2,
    })
    linkedList:insertElementASC(e, testCompareHandle)

    e = self:createElement({
        priority = 1,
    })
    linkedList:insertElementASC(e, testCompareHandle)

    self:assetInsert(linkedList, true)
end

function SortedLinkedList:doTest3()
    local linkedList = SortedLinkedList.new()
    local e
    e = self:createElement({
        priority = 1,
    })
    linkedList:insertElementASC(e, testCompareHandle)
    e = self:createElement({
        priority = 3,
    })
    linkedList:insertElementASC(e, testCompareHandle)
    e = self:createElement({
        priority = 2,
    })
    linkedList:insertElementASC(e, testCompareHandle)

    e = self:createElement({
        priority = 4,
    })
    linkedList:insertElementASC(e, testCompareHandle)

    e = self:createElement({
        priority = 5,
    })
    linkedList:insertElementASC(e, testCompareHandle)

    self:assetInsert(linkedList, true)
end


function SortedLinkedList:doTest4()
    local linkedList = SortedLinkedList.new()
    local e
    e = self:createElement({
        priority = 3,
    })
    linkedList:insertElementASC(e, testCompareHandle)
    e = self:createElement({
        priority = 2,
    })
    linkedList:insertElementASC(e, testCompareHandle)
    e = self:createElement({
        priority = 1,
    })
    linkedList:insertElementASC(e, testCompareHandle)

    e = self:createElement({
        priority = 5,
    })
    linkedList:insertElementASC(e, testCompareHandle)

    e = self:createElement({
        priority = 4,
    })
    linkedList:insertElementASC(e, testCompareHandle)

    self:assetInsert(linkedList, true)
end

-- desc
function SortedLinkedList:doTest5()
    local linkedList = SortedLinkedList.new()
    local e
    e = self:createElement({
        priority = 1,
    })
    linkedList:insertElementDESC(e, testCompareHandle)
    e = self:createElement({
        priority = 2,
    })
    linkedList:insertElementDESC(e, testCompareHandle)
    e = self:createElement({
        priority = 3,
    })
    linkedList:insertElementDESC(e, testCompareHandle)

    e = self:createElement({
        priority = 4,
    })
    linkedList:insertElementDESC(e, testCompareHandle)

    e = self:createElement({
        priority = 5,
    })
    linkedList:insertElementDESC(e, testCompareHandle)

    self:assetInsert(linkedList, false)
end

function SortedLinkedList:doTest6()
    local linkedList = SortedLinkedList.new()
    local e
    e = self:createElement({
        priority = 5,
    })
    linkedList:insertElementDESC(e, testCompareHandle)
    e = self:createElement({
        priority = 4,
    })
    linkedList:insertElementDESC(e, testCompareHandle)
    e = self:createElement({
        priority = 3,
    })
    linkedList:insertElementDESC(e, testCompareHandle)

    e = self:createElement({
        priority = 2,
    })
    linkedList:insertElementDESC(e, testCompareHandle)

    e = self:createElement({
        priority = 1,
    })
    linkedList:insertElementDESC(e, testCompareHandle)

    self:assetInsert(linkedList, false)
end


function SortedLinkedList:doTest7()
    local linkedList = SortedLinkedList.new()
    local e
    e = self:createElement({
        priority = 5,
    })
    linkedList:insertElementDESC(e, testCompareHandle)
    e = self:createElement({
        priority = 1,
    })
    linkedList:insertElementDESC(e, testCompareHandle)
    e = self:createElement({
        priority = 4,
    })
    linkedList:insertElementDESC(e, testCompareHandle)

    e = self:createElement({
        priority = 3,
    })
    linkedList:insertElementDESC(e, testCompareHandle)

    e = self:createElement({
        priority = 2,
    })
    linkedList:insertElementDESC(e, testCompareHandle)

    self:assetInsert(linkedList, false)
end

function SortedLinkedList:doTest8()
    local linkedList = SortedLinkedList.new()
    local e
    local de
    e = self:createElement({
        priority = 1,
    })
    linkedList:insertElementASC(e, testCompareHandle)
    e = self:createElement({
        priority = 2,
    })
    linkedList:insertElementASC(e, testCompareHandle)
    de = self:createElement({
        priority = 3,
    })
    linkedList:insertElementASC(de, testCompareHandle)

    e = self:createElement({
        priority = 4,
    })
    linkedList:insertElementASC(e, testCompareHandle)

    e = self:createElement({
        priority = 5,
    })
    linkedList:insertElementASC(e, testCompareHandle)

    self:assetInsert(linkedList, true)

    linkedList:removeElement(de)

    local count = 1
    linkedList:every(function(element)
        if count == 1 then
            assert(element.bindData.priority == 1)
        elseif count == 2 then
            assert(element.bindData.priority == 2)
        elseif count == 3 then
            assert(element.bindData.priority == 4)
        elseif count == 4 then
            assert(element.bindData.priority == 5)
        end
        count = count + 1
    end)

end

function SortedLinkedList:doTest9()
    local linkedList = SortedLinkedList.new()
    local e
    e = self:createElement({
        priority = 1,
    })
    linkedList:insertElementDESC(e, testCompareHandle)
    e = self:createElement({
        priority = 2,
    })
    linkedList:insertElementDESC(e, testCompareHandle)
    e = self:createElement({
        priority = 3,
    })
    linkedList:insertElementDESC(e, testCompareHandle)

    local ine1 = self:createElement({
        priority = 4,
    })
    linkedList:insertElementFront(e, ine1)

    local ine2 = self:createElement({
        priority = 5,
    })
    linkedList:insertElementFront(e, ine2)

    local count = 1
    linkedList:every(function(element)
        if count == 1 then
            assert(element.bindData.priority == 4)
        elseif count == 2 then
            assert(element.bindData.priority == 5)
        elseif count == 3 then
            assert(element.bindData.priority == 3)
        elseif count == 4 then
            assert(element.bindData.priority == 2)
        elseif count == 5 then
            assert(element.bindData.priority == 1)
        end
        count = count + 1
    end)
end

function SortedLinkedList:doTest10()
    local linkedList = SortedLinkedList.new()
    local e
    e = self:createElement({
        priority = 1,
    })
    linkedList:insertElementTail(e)
    e = self:createElement({
        priority = 2,
    })
    linkedList:insertElementTail(e)
    e = self:createElement({
        priority = 3,
    })
    linkedList:insertElementTail(e)

    local count = 1
    linkedList:every(function(element)
        if count == 1 then
            assert(element.bindData.priority == 1)
        elseif count == 2 then
            assert(element.bindData.priority == 2)
        elseif count == 3 then
            assert(element.bindData.priority == 3)
        end
        count = count + 1
    end)
end

function SortedLinkedList:doTest11()
    local linkedList = SortedLinkedList.new()
    local e
    e = self:createElement({
        priority = 1,
    })
    linkedList:insertElementHead(e)
    e = self:createElement({
        priority = 2,
    })
    linkedList:insertElementHead(e)
    e = self:createElement({
        priority = 3,
    })
    linkedList:insertElementHead(e)

    local count = 1
    linkedList:every(function(element)
        if count == 1 then
            assert(element.bindData.priority == 3)
        elseif count == 2 then
            assert(element.bindData.priority == 2)
        elseif count == 3 then
            assert(element.bindData.priority == 1)
        end
        count = count + 1
    end)
end

function SortedLinkedList:allTest()
    print(' test 1')
    self:doTest1()
    print(' test 2')
    self:doTest2()
    print(' test 3')
    self:doTest3()
    print(' test 4')
    self:doTest4()
    print(' test 5')
    self:doTest5()
    print(' test 6')
    self:doTest6()
    print(' test 7')
    self:doTest7()
    print(' test 8')
    self:doTest8()
    print(' test 9')
    self:doTest9()
    print(' test 10')
    self:doTest10()
    print(' test 10')
    self:doTest11()
    print(' test 11')
end

return SortedLinkedList